@inproceedings{adamopoulou2020overview,
  title={An overview of chatbot technology},
  author={Adamopoulou, Eleni and Moussiades, Lefteris},
  booktitle={IFIP International Conference on Artificial Intelligence Applications and Innovations},
  pages={373--383},
  year={2020},
  organization={Springer}
}

@ARTICLE{9687577,
  author={Ren, Ranci and Zapata, Mireya and Castro, John W. and Dieste, Oscar and Acu√±a, Silvia T.},
  journal={IEEE Access}, 
  title={Experimentation for Chatbot Usability Evaluation: A Secondary Study}, 
  year={2022},
  volume={10},
  number={},
  pages={12430-12464},
  doi={10.1109/ACCESS.2022.3145323}}
  
@inproceedings{wen2021siri,
  title={Siri, write the next method},
  author={Wen, Fengcai and Aghajani, Emad and Nagy, Csaba and Lanza, Michele and Bavota, Gabriele},
  booktitle={2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)},
  pages={138--149},
  year={2021},
  organization={IEEE}
}

@article{sobania2021choose,
  title={Choose Your Programming Copilot: A Comparison of the Program Synthesis Performance of GitHub Copilot and Genetic Programming},
  author={Sobania, Dominik and Briesch, Martin and Rothlauf, Franz},
  journal={arXiv preprint arXiv:2111.07875},
  year={2021}
}

@inproceedings{srivastava2019reference,
  title={A Reference Architecture for Applications with Conversational Components},
  author={Srivastava, Saurabh and Prabhakar, TV},
  booktitle={2019 IEEE 10th International Conference on Software Engineering and Service Science (ICSESS)},
  pages={1--5},
  year={2019},
  organization={IEEE}
}

@article{finkbeiner2021kunstliche,
  title={K{\"u}nstliche Intelligenz in der Softwareentwicklung: {\"U}ber die Schulter geschaut},
  author={Finkbeiner, Bernd and Schmitt, Frederik},
  journal={iX Magazin f{\"u}r professionelle Informationstechnik},
  number={8},
  pages={40--43},
  year={2021},
  publisher={Heise Verlag}
}

@article{brown2020language,
  title={Language models are few-shot learners},
  author={Brown, Tom and Mann, Benjamin and Ryder, Nick and Subbiah, Melanie and Kaplan, Jared D and Dhariwal, Prafulla and Neelakantan, Arvind and Shyam, Pranav and Sastry, Girish and Askell, Amanda and others},
  journal={Advances in neural information processing systems},
  volume={33},
  pages={1877--1901},
  year={2020}
}

 @online{chintala_2020, 
   title={OpenAI showed an cool code generation demo at MSBuild2020 of a big language model trained on lots of github repositories the demo does some non-trivial codegen specific to the context.eagerly waiting for more details!video: Starting at 28:45 https://t.co/k1oapwh6hc}, url={https://twitter.com/soumithchintala/status/1263221177650159620}, 
   journal={Twitter}, 
   publisher={Twitter}, 
   author={Chintala, Soumith}, 
   year={2020}, 
   month={May}
 } 
 
@online{crivello_2020, 
  title={GPT3 writing code. A compiler from natural language to code.people don't understand - this will change absolutely everything. we're decoupling human horsepower from code production. the intellectual equivalent of the discovery of the engine. https://t.co/qgjbqrbdqv Pic.twitter.com/cjiark8j0m},
  url={https://twitter.com/Altimor/status/1278736953836400640}, 
  journal={Twitter}, 
  publisher={Twitter}, 
  author={Crivello, Flo}, 
  year={2020}, 
  month={Jul}
} 

@article{https://doi.org/10.48550/arxiv.1902.01007,
  doi = {10.48550/ARXIV.1902.01007},
  url = {https://arxiv.org/abs/1902.01007},
  author = {McCoy, R. Thomas and Pavlick, Ellie and Linzen, Tal},
  keywords = {Computation and Language (cs.CL), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Right for the Wrong Reasons: Diagnosing Syntactic Heuristics in Natural Language Inference},
  publisher = {arXiv},
  journal={arXiv preprint arXiv:1902.01007}, 
  year = {2019},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@inproceedings{Dabic:msr2021data,
  author    = {Ozren Dabic and Emad Aghajani and Gabriele Bavota},
  title     = {Sampling Projects in GitHub for {MSR} Studies},
  booktitle = {18th {IEEE/ACM} International Conference on Mining Software Repositories,
               {MSR} 2021},
  pages     = {560--564},
  publisher = {{IEEE}},
  year      = {2021}
}

@article{https://doi.org/10.48550/arxiv.2107.03374,
  doi = {10.48550/ARXIV.2107.03374},
  
  url = {https://arxiv.org/abs/2107.03374},
  
  author = {Chen, Mark and Tworek, Jerry and Jun, Heewoo and Yuan, Qiming and Pinto, Henrique Ponde de Oliveira and Kaplan, Jared and Edwards, Harri and Burda, Yuri and Joseph, Nicholas and Brockman, Greg and Ray, Alex and Puri, Raul and Krueger, Gretchen and Petrov, Michael and Khlaaf, Heidy and Sastry, Girish and Mishkin, Pamela and Chan, Brooke and Gray, Scott and Ryder, Nick and Pavlov, Mikhail and Power, Alethea and Kaiser, Lukasz and Bavarian, Mohammad and Winter, Clemens and Tillet, Philippe and Such, Felipe Petroski and Cummings, Dave and Plappert, Matthias and Chantzis, Fotios and Barnes, Elizabeth and Herbert-Voss, Ariel and Guss, William Hebgen and Nichol, Alex and Paino, Alex and Tezak, Nikolas and Tang, Jie and Babuschkin, Igor and Balaji, Suchir and Jain, Shantanu and Saunders, William and Hesse, Christopher and Carr, Andrew N. and Leike, Jan and Achiam, Josh and Misra, Vedant and Morikawa, Evan and Radford, Alec and Knight, Matthew and Brundage, Miles and Murati, Mira and Mayer, Katie and Welinder, Peter and McGrew, Bob and Amodei, Dario and McCandlish, Sam and Sutskever, Ilya and Zaremba, Wojciech},
  keywords = {Machine Learning (cs.LG), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Evaluating Large Language Models Trained on Code},
  publisher = {arXiv},
  year = {2021},
  journal={arXiv preprint arXiv:2107.03374}, 
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@article{pile,
  title={The {P}ile: An 800GB Dataset of Diverse Text for Language Modeling},
  author={Gao, Leo and Biderman, Stella and Black, Sid and Golding, Laurence and Hoppe, Travis and Foster, Charles and Phang, Jason and He, Horace and Thite, Anish and Nabeshima, Noa and Presser, Shawn and Leahy, Connor},
  journal={arXiv preprint arXiv:2101.00027},
  year={2020}
}

@article{DBLP:journals/corr/abs-2105-09938,
  author    = {Dan Hendrycks and
               Steven Basart and
               Saurav Kadavath and
               Mantas Mazeika and
               Akul Arora and
               Ethan Guo and
               Collin Burns and
               Samir Puranik and
               Horace He and
               Dawn Song and
               Jacob Steinhardt},
  title     = {Measuring Coding Challenge Competence With {APPS}},
  journal   = {CoRR},
  volume    = {abs/2105.09938},
  year      = {2021},
  url       = {https://arxiv.org/abs/2105.09938},
  eprinttype = {arXiv},
  eprint    = {2105.09938},
  timestamp = {Mon, 31 May 2021 16:16:57 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2105-09938.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{10.5555/3175742,
author = {Martin, Robert C.},
title = {Clean Architecture: A Craftsman's Guide to Software Structure and Design},
year = {2017},
isbn = {0134494164},
publisher = {Prentice Hall Press},
address = {USA},
edition = {1st},
abstract = {Practical Software Architecture Solutions from the Legendary Robert C. Martin (Uncle Bob) By applying universal rules of software architecture, you can dramatically improve developer productivity throughout the life of any software system. Now, building upon the success of his best-selling books Clean Code and The Clean Coder, legendary software craftsman Robert C. Martin (Uncle Bob) reveals those rules and helps you apply them. Martins Clean Architecture doesnt merely present options. Drawing on over a half-century of experience in software environments of every imaginable type, Martin tells you what choices to make and why they are critical to your success. As youve come to expect from Uncle Bob, this book is packed with direct, no-nonsense solutions for the real challenges youll facethe ones that will make or break your projects. Learn what software architects need to achieveand core disciplines and practices for achieving it Master essential software design principles for addressing function, component separation, and data management See how programming paradigms impose discipline by restricting what developers can do Understand whats critically important and whats merely a detail Implement optimal, high-level structures for web, database, thick-client, console, and embedded applications Define appropriate boundaries and layers, and organize components and services See why designs and architectures go wrong, and how to prevent (or fix) these failures Clean Architecture is essential reading for every current or aspiring software architect, systems analyst, system designer, and software managerand for every programmer who must execute someone elses designs. Register your product at informit.com/register for convenient access to downloads, updates, and/or corrections as they become available.}
}